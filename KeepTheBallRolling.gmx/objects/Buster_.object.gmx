<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Buster</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = 0;

jumpspeed = -20;
canjump = 2; //0 if cannot jump or continue jumping
//1 if cannot jump but can continue jumping (i.e. in air)
//2 if can jump
mass = 10;
hspeed = 0;
radius = 32;
<<<<<<< HEAD

button = false;
=======
angle = 0;
>>>>>>> 98612a034927b6f584f4db4ee13ebc4a085e4eda
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(canjump == 1)
{
    canjump = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//falling
if(position_empty(x + lengthdir_x(32, 45) + 1, y + lengthdir_y(32, -45) + 2 + vspeed))
    a = 1;
    else
        a = 0;
if(position_empty(x - lengthdir_x(32, 45) - 1, y + lengthdir_y(32, -45) + 2 + vspeed))
    b = 1;
    else
        b = 0;
        
corners = position_empty(x - lengthdir_x(32, 45) - 1, y + lengthdir_y(32, -45) + 2 + vspeed) 
xor position_empty(x + lengthdir_x(32, 45) + 2, y + lengthdir_y(32, -45) + 2 + vspeed);

if(place_free(x, y + vspeed + 2) &amp;&amp; corners == 0)
{
    gravity = 1;
    gravity_direction = 270;
    if(canjump == 2)
    {
        canjump = 0;
    }
}
else if(corners == 1)
{
    //gravity = sin(pi/4);
    //gravity_direction = 315;        
    //hspeed = speed*cos(pi/4);
    //vspeed = hspeed;
    canjump = 2;    
}
else
{       
    gravity = 0;
    gravity_direction = 270;
    if(vspeed &gt; 0)
    {
        canjump = 2;
    } 
    vspeed = 0;        
}



//jumping
if(keyboard_check(vk_up) &amp;&amp; (canjump == 1))
{
    vspeed = jumpspeed;
}
if(keyboard_check_pressed(vk_up) &amp;&amp; canjump == 2)
{
    vspeed = jumpspeed;
    canjump = 1;
    alarm[0] = 10;
}
if(keyboard_check_released(vk_up) &amp;&amp; canjump == 1)
{
    canjump = 0;
}
<<<<<<< HEAD
//button
if(position_meeting(x, y + 32, button1) &amp;&amp; button = false)
{
    button1.y += 32;
    button = true;
}
//trampoline
if(position_meeting(x, y + 32, jumper1) &amp;&amp; button = true)
{
    vspeed -= 40;
}
//trapdoor
if(position_meeting(x, y + 32, trapdoor1) || position_meeting(x, y + 32, trapdoor2))
{
    trapdoor1.image_angle -= 90;
    trapdoor2.image_angle += 90
}
//friction plate
if(position_meeting(x, y + 32, brake1))
{
    if(hspeed &gt; 0 &amp;&amp; hspeed - 0.25 &lt;= 0)
    {
        hspeed = 0;
    }
    if(hspeed &gt; 0 &amp;&amp; hspeed - 0.25 &gt; 0)
    {
        hspeed -= .25;
    }
    if(hspeed &lt; 0 &amp;&amp; hspeed + 0.25 &gt;= 0)
    {
        hspeed = 0;
    }
    if(hspeed &lt; 0 &amp;&amp; hspeed + 0.25 &lt; 0)
    {
        hspeed += .25;
    }
}
=======

/*if(!place_free(x, y + vspeed) &amp;&amp; vspeed != 0)
{
    canjump = 0;
    while(place_free(x, y - 1))
    y--;
    vspeed = 0;  
}*/

>>>>>>> 98612a034927b6f584f4db4ee13ebc4a085e4eda
//horizontal collisions
if(!place_free(x + hspeed, y) &amp;&amp; instance_place(x + hspeed, y, platform).topsolid != 1)
{
    move_bounce_solid(false);   
}

//while(place_free(x, y + 2) &amp;&amp; canjump == 2)
    //y++; 
while(!place_free(x, y + 1) &amp;&amp; canjump == 2)
    y--; 

    
//rolling
angle -= (180/pi*hspeed/radius);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>65280</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(Buster, 0, x, y, 1, 1, angle, image_blend, image_alpha);
//draw_circle(x - lengthdir_x(32, 45) - 1, y + lengthdir_y(32, -45) + 1, 2, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
