<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Buster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = 0;

jumpspeed = -10;
maxvspeed = 10;
canjump = 2; //0 if cannot jump or continue jumping
//1 if cannot jump but can continue jumping (i.e. in air)
//2 if can jump
mass = 10;
hspeed = 7;
radius = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(canjump == 1)
{
    canjump = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*while(position_meeting(x, y + radius,Platform1))
        y -= .1;
    while(position_meeting(x + radius, y,Platform1))
        x -= .1;
    while(position_meeting(x + lengthdir_x(radius, 225), y + lengthdir_y(radius, 225),Platform1))
        {
         y -= .2
         x += .2
        }
    while(position_meeting(x + lengthdir_x(radius, 315), y + lengthdir_y(radius,315),Platform1))
       {
         y -= .2
         x -= .2
        }
        
    while(position_meeting(x + lengthdir_x(radius, 45), y + lengthdir_y(radius,45),Platform1))
       {
         y += .2
         x -= .2
        }
    while(position_meeting(x + lengthdir_x(radius, 135), y + lengthdir_y(radius,135),Platform1))
       {
         y += .2
         x += .2
        }
        y = round(y);
        x = round(x);
*/
if(vspeed &gt; maxvspeed)
{
    vspeed = maxvspeed;
}
if(image_angle &gt; 360.000)
{
    image_angle -= 360.000;
}
if(image_angle &lt; 0.000)
{
    image_angle += 360.000;
}
angle = image_angle*pi/180;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//falling
if(place_free(x, y + vspeed + 1))
{
    gravity = 1;
    if(canjump == 2)
    {
        canjump = 0;
    }
}
else
{        
    
    gravity = 0;
    if(vspeed &gt; 0)
    {
        move_contact_solid(270, 10);
        vspeed = 0;
        canjump = 2;
        if(!position_empty(x, y + radius + 1))
        {
        mass = 0;
            y += 1;
        }     
        if(place_free(x, y))
            y -= 1;
    }     
}


//jumping
if(keyboard_check(vk_up) &amp;&amp; (canjump == 1))
{
    vspeed = jumpspeed;
}
if(keyboard_check_pressed(vk_up) &amp;&amp; canjump == 2)
{
    vspeed = jumpspeed;
    canjump = 1;
    alarm[0] = 10;
}
if(keyboard_check_released(vk_up) &amp;&amp; canjump = 1)
{
    canjump = 0;
}

//horizontal collisions
if(!place_free(x + hspeed, y - 2))
{
    hspeed = -hspeed;    
}
//top collision
//if(!place_free(x, y + vspeed - 1))
//{
    //vspeed = 0;
//}

//rolling
image_angle -= (180/pi*hspeed/radius);

//Trenton = AWSOMESAUSE
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
